<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>fjavieralba.com</title><link>blog/</link><description></description><atom:link href="blog/feeds/all.rss.xml" rel="self"></atom:link><lastBuildDate>Sat, 27 Oct 2012 18:21:00 +0200</lastBuildDate><item><title>Compiling Unitex Corpus Processor</title><link>blog/compiling-unitex-corpus-processor.html</link><description>&lt;p&gt;&lt;a class="reference external" href="http://www-igm.univ-mlv.fr/~unitex/"&gt;Unitex Corpus Processor&lt;/a&gt; is a very useful software component for some NLP tasks.&lt;/p&gt;
&lt;p&gt;If you have ever needed to compile it as a dynamic library in Unix, with the following command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
make 64BITS=yes LIBRARY=yes
&lt;/pre&gt;
&lt;p&gt;maybe you have found an error similar to this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
g++ *.o -Wall -W -O3 -fPIC -D_NOT_UNDER_WINDOWS -DUNITEX_LIBRARY
-I&amp;quot;../include_tre&amp;quot; -Ilibtre/include -I&amp;quot;..&amp;quot;  -Llibtre/lib -ltre -lpthread
-shared -o ../bin/libunitex.so/usr/bin/ld: libtre/lib/libtre.a(regcomp.o):
relocation R_X86_64_32 against `a local symbol' can not be used when making
a shared object; recompile with -fPIC
libtre/lib/libtre.a: could not read symbols: Bad value
collect2: ld devolvi√≥ el estado de salida 1
make: *** [.libunitex] Error 1
&lt;/pre&gt;
&lt;p&gt;I could solve this issue unzipping and installing the &amp;quot;tre&amp;quot; library included in Unitex distribution (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;UNITEX_DIR&amp;gt;/Src/C++/tre-0.8.0.tar.gz&lt;/span&gt;&lt;/tt&gt;):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cd ..
tar xvfz tre-0.8.0.tar.gz
cd tre-0.8.0

./configure
make
&lt;/pre&gt;
&lt;p&gt;And, as &amp;quot;root&amp;quot;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
make install
&lt;/pre&gt;
&lt;p&gt;Then, return to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;UNITEX_DIR&amp;gt;/Src/C++/build&lt;/span&gt;&lt;/tt&gt; and execute the following command (all in one line):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
g++ *.o -Wall -W -O3 -fPIC -D_NOT_UNDER_WINDOWS -DUNITEX_LIBRARY -I&amp;quot;../include_tre&amp;quot;
-Ilibtre/include -I&amp;quot;..&amp;quot;  -L/usr/local/lib -ltre -lpthread -shared
-o ../bin/libunitex.so
&lt;/pre&gt;
&lt;p&gt;If all goes well, you will have your Unitex library in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;UNITEX_DIR&amp;gt;/Src/C++/bin/libunitex.so&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Hope it helps!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">F. Javier Alba</dc:creator><pubDate>Sat, 27 Oct 2012 18:21:00 +0200</pubDate><guid>tag:blog,2012-10-27:compiling-unitex-corpus-processor.html</guid><category>nlp</category><category>unitex</category><category>issues</category><category>unix</category></item><item><title>Pelican: a static blog generator for Pythonistas</title><link>blog/pelican-a-static-blog-generator-for-pythonistas.html</link><description>&lt;p&gt;Hi!&lt;/p&gt;
&lt;p&gt;I would like to start this blog speaking about &lt;a class="reference external" href="http://blog.notmyidea.org/pelican-a-simple-static-blog-generator-in-python.html"&gt;Pelican&lt;/a&gt;, a nice Python project initiated by &lt;a class="reference external" href="http://notmyidea.org/"&gt;Alexis Metaireau&lt;/a&gt;. It allows you to generate a complete static blog/site from &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; Templates. The blog you are reading just now is created in that way.&lt;/p&gt;
&lt;p&gt;Why would you do that? &lt;em&gt;First&lt;/em&gt;: for pythonic fun. &lt;em&gt;Second&lt;/em&gt;: because of the &lt;strong&gt;static&lt;/strong&gt; part: your site will be a bunch of static files (HTML, CSS...). This could sound strange in 2012 but I think is a good way to go if you want to keep it simple. In addition, it's extremely easy to host a static site for free, even maintaining your own domain name. (We will see how later)&lt;/p&gt;
&lt;p&gt;That said, you will get in the box many features you would expect from a blog site, including comments, socialize-buttons, pagination, tags, categories and so on.&lt;/p&gt;
&lt;div class="section" id="restructuredtext"&gt;
&lt;h2&gt;reStructuredText&lt;/h2&gt;
&lt;p&gt;You can write your posts and pages using reStructuredText or markdown.&lt;/p&gt;
&lt;p&gt;Probably you already know but in case you are wondering how a reStructuredText (rst) template looks like, this is an example of a blog entry written in rst:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;Title of a post&lt;/span&gt;
&lt;span class="gh"&gt;###############&lt;/span&gt;
&lt;span class="nc"&gt;:category:&lt;/span&gt; &lt;span class="nf"&gt;programming&lt;/span&gt;

&lt;span class="gh"&gt;Subtitle&lt;/span&gt;
&lt;span class="gh"&gt;--------&lt;/span&gt;
Hi!

This is my first rst post!

And this is a link to a page_


&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="nt"&gt;_page:&lt;/span&gt; http://moliware.com/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;reStructuredText is part of &lt;a class="reference external" href="http://docutils.sourceforge.net/"&gt;docutils&lt;/a&gt;, a powerful and open-source text processing system written in Python.&lt;/p&gt;
&lt;p&gt;In an &lt;tt class="docutils literal"&gt;rst&lt;/tt&gt; file you can specify links, insert images, code snippets and many other things. &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/user/rst/quickref.html"&gt;Here&lt;/a&gt; you have a good overview of all its features.&lt;/p&gt;
&lt;p&gt;As you may know, it's used for generating documentation. For example, with &lt;a class="reference external" href="http://sphinx.pocoo.org/"&gt;Sphinx&lt;/a&gt; you write your &lt;tt class="docutils literal"&gt;rst&lt;/tt&gt; files once and then you can generate your documentation in multiple formats like PDF of HTML.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-pelican"&gt;
&lt;h2&gt;Installing Pelican&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
$ pip install pelican
&lt;/pre&gt;
&lt;p&gt;If you're curious, you can review its code and clone the &lt;a class="reference external" href="https://github.com/ametaireau/pelican"&gt;github repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-a-site-blog"&gt;
&lt;h2&gt;Creating a site/blog&lt;/h2&gt;
&lt;p&gt;Once installed, to create a new site, create a folder and run the pelican command. For example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ mkdir my_blog
$ pelican my_blog
&lt;/pre&gt;
&lt;p&gt;This command will generate an &lt;tt class="docutils literal"&gt;output&lt;/tt&gt; folder with an entire blog site with the default content.
If you open the &lt;tt class="docutils literal"&gt;index.html&lt;/tt&gt; file inside &lt;tt class="docutils literal"&gt;output&lt;/tt&gt; you will see something similar to:&lt;/p&gt;
&lt;img alt="images/pelican_default.png" class="align-center" src="images/pelican_default.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="writing-posts"&gt;
&lt;h2&gt;Writing posts&lt;/h2&gt;
&lt;p&gt;To start writing posts, do the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Inside your site folder, create a new folder that will contain your rst sources:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;my_blog
&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir rst
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create an &lt;tt class="docutils literal"&gt;rst&lt;/tt&gt; file inside that directory with an example post:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vim rst/my_first_post.rst
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;Starting with Pelican&lt;/span&gt;
&lt;span class="gh"&gt;#####################&lt;/span&gt;
&lt;span class="nc"&gt;:date:&lt;/span&gt; &lt;span class="nf"&gt;2012-03-30 23:47&lt;/span&gt;
&lt;span class="nc"&gt;:category:&lt;/span&gt; &lt;span class="nf"&gt;programming&lt;/span&gt;
&lt;span class="nc"&gt;:tags:&lt;/span&gt; &lt;span class="nf"&gt;python, blog, rst, pelican&lt;/span&gt;
&lt;span class="nc"&gt;:author:&lt;/span&gt; &lt;span class="nf"&gt;F\. Javier Alba&lt;/span&gt;
&lt;span class="nc"&gt;:excerpt:&lt;/span&gt; &lt;span class="nf"&gt;This is an excerpt of my post.&lt;/span&gt;

&lt;span class="gh"&gt;Introduction&lt;/span&gt;
&lt;span class="gh"&gt;------------&lt;/span&gt;

Hi!

This is my first rst post!

And this is a link to a page_


&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="nt"&gt;_page:&lt;/span&gt; http://moliware.com/
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Now, run pelican indicating your &lt;tt class="docutils literal"&gt;rst&lt;/tt&gt; directory:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pelican rst/
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Open &lt;tt class="docutils literal"&gt;my_blog/output/index.html&lt;/tt&gt; and you will see your post in html format:&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="images/first_post.png" class="align-center" src="images/first_post.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="writing-pages"&gt;
&lt;h2&gt;Writing pages&lt;/h2&gt;
&lt;p&gt;Pelican also support regular pages.&lt;/p&gt;
&lt;p&gt;Imagine you want an &amp;quot;About&amp;quot; page apart from your blog posts.&lt;/p&gt;
&lt;p&gt;All you have to do is create a &lt;tt class="docutils literal"&gt;pages&lt;/tt&gt; folder and create a new rst file with your page content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir rst/pages
&lt;span class="nv"&gt;$ &lt;/span&gt;vim rst/pages/about.rst
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;About me&lt;/span&gt;
&lt;span class="gh"&gt;########&lt;/span&gt;
&lt;span class="nc"&gt;:date:&lt;/span&gt; &lt;span class="nf"&gt;2012-03-30 23:47&lt;/span&gt;
&lt;span class="nc"&gt;:author:&lt;/span&gt; &lt;span class="nf"&gt;F\. Javier Alba&lt;/span&gt;

This is an about page!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run again the pelican script against your sources and it will generate also the new page:&lt;/p&gt;
&lt;img alt="images/page.png" class="align-center" src="images/page.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-your-blog"&gt;
&lt;h2&gt;Configuring your blog&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;Pelican&lt;/tt&gt; command optionally accepts a configuration file to customize some parts of your blog.&lt;/p&gt;
&lt;p&gt;E.g: output folder, date formats, pagination, disqus comments, Twitter integration... all these aspects and several more can be configured in a python configuration file and are supported by the &amp;quot;official themes&amp;quot;. (In fact, this will depend on the theme you are using. You can create your own pelican theme and choose what of these features you will support.)&lt;/p&gt;
&lt;p&gt;The following is an example of a Pelican configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;DEFAULT_CATEGORY = &amp;#39;Uncategorized&amp;#39;

TWITTER_USERNAME = &amp;#39;fjavieralba&amp;#39;

PDF_GENERATOR = False
REVERSE_CATEGORY_ORDER = True
DEFAULT_PAGINATION = 10

FEED_RSS = &amp;#39;feeds/all.rss.xml&amp;#39;
CATEGORY_FEED_RSS = &amp;#39;feeds/%s.rss.xml&amp;#39;

SOCIAL = ((&amp;#39;twitter&amp;#39;, &amp;#39;http://twitter.com/fjavieralba&amp;#39;),
          (&amp;#39;linkedIn&amp;#39;, &amp;#39;http://es.linkedin.com/in/fjavieralba/en&amp;#39;),
          (&amp;#39;github&amp;#39;, &amp;#39;http://github.com/fjavieralba&amp;#39;),)

OUTPUT_PATH = &amp;#39;/path/to/my_blog/output&amp;#39;

# static paths will be copied under the same name
STATIC_PATHS = [&amp;quot;images&amp;quot;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To tell pelican to use your configuration file simply run the command with the -s option:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pelican rst/ -s &amp;lt;CONF_FILE&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see more details about pelican configuration in &lt;a class="reference external" href="http://pelican.readthedocs.org/en/2.8/index.html"&gt;the official Pelican documentation&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="extending-pelican"&gt;
&lt;h2&gt;Extending Pelican&lt;/h2&gt;
&lt;p&gt;If you have some coding skills or are used to web templates engines like &lt;a class="reference external" href="http://jinja.pocoo.org/"&gt;Jinja&lt;/a&gt;, you will find it easy to extend and adapt Pelican to fit your needs.&lt;/p&gt;
&lt;div class="section" id="modifying-default-themes"&gt;
&lt;h3&gt;Modifying default themes&lt;/h3&gt;
&lt;p&gt;We have been using the default theme. But what if you want to customize a little bit more the look and feel of your blog?&lt;/p&gt;
&lt;p&gt;One way of customization is via configuration file. But if you want to go further, you can directly change your theme files.&lt;/p&gt;
&lt;p&gt;Themes usually consist in two parts: the &lt;tt class="docutils literal"&gt;templates&lt;/tt&gt; folder and the &lt;tt class="docutils literal"&gt;static&lt;/tt&gt; folder.
&lt;tt class="docutils literal"&gt;static&lt;/tt&gt; usually contains CSS files, images, etc. and &lt;tt class="docutils literal"&gt;templates&lt;/tt&gt; contains &lt;tt class="docutils literal"&gt;.html&lt;/tt&gt; files that are actually &lt;a class="reference external" href="http://jinja.pocoo.org/"&gt;Jinja&lt;/a&gt; templates. Experimenting a bit and changing the CSS styles or the templates of an existing theme is sometimes all you need to personalize your new blog.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/ametaireau/pelican-themes"&gt;In this Github repo&lt;/a&gt; you can find all the &amp;quot;official&amp;quot; Pelican themes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-your-own-theme"&gt;
&lt;h3&gt;Creating your own theme&lt;/h3&gt;
&lt;p&gt;If you have a clear idea of how your site should be and look like, you can also create your own theme.&lt;/p&gt;
&lt;p&gt;It's a good idea to start from a existing one. Again in the &lt;a class="reference external" href="http://pelican.readthedocs.org/en/2.8/themes.html"&gt;project documentation page&lt;/a&gt; you have more details on how to do that.&lt;/p&gt;
&lt;p&gt;In fact, this blog is a Pelican site based on a theme I created (miserably copying the look and feel of &lt;a class="reference external" href="http://lucumr.pocoo.org/"&gt;Armin Ronacher's blog&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="deploying-your-site-to-heroku-or-github-pages-for-free"&gt;
&lt;h3&gt;Deploying your site to Heroku or Github Pages for free&lt;/h3&gt;
&lt;p&gt;One of the advantages of having an static blog (apart from being the most modern of your colleagues) is that it's easy to host your blog/site for free.&lt;/p&gt;
&lt;p&gt;Github Pages provides free hosting for static pages of projects or users in Github. They have a &lt;a class="reference external" href="http://help.github.com/pages/"&gt;nice tutorial&lt;/a&gt; on how to create your static site, and it's also possible to use your own domain name. (This site is served in that way!)&lt;/p&gt;
&lt;p&gt;You could also take advantage of the &amp;quot;free dino&amp;quot; that Heroku provides to serve your site. It only requires an &lt;a class="reference external" href="http://kennethreitz.com/static-sites-on-heroku-cedar.html"&gt;easy extra step&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">F. Javier Alba</dc:creator><pubDate>Sun, 15 Apr 2012 15:50:00 +0200</pubDate><guid>tag:blog,2012-04-15:pelican-a-static-blog-generator-for-pythonistas.html</guid><category>blog</category><category>rst</category><category>pelican</category></item></channel></rss>